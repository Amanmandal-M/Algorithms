Bubble Sort - Full Explanation

### Concept:
Bubble Sort is a simple comparison-based sorting algorithm. The idea is to repeatedly step through the list, compare adjacent elements, and swap them if they are in the wrong order. This process is repeated until no more swaps are needed, indicating that the list is sorted.

### Steps:
1. Start with the first element of the array.
2. Compare it with the next element.
3. If the first element is larger, swap it with the next element.
4. Move to the next adjacent pair and repeat the comparison and swapping.
5. After each complete pass through the array, the largest element is "bubbled" to the end.
6. Repeat the process for all elements, excluding the already sorted part at the end.

### Example Walkthrough:
For an array: [5, 2, 9, 1, 5, 6]

Pass 1:
- Compare 5 and 2, swap → [2, 5, 9, 1, 5, 6]
- Compare 5 and 9, no swap → [2, 5, 9, 1, 5, 6]
- Compare 9 and 1, swap → [2, 5, 1, 9, 5, 6]
- Compare 9 and 5, swap → [2, 5, 1, 5, 9, 6]
- Compare 9 and 6, swap → [2, 5, 1, 5, 6, 9]
- Now, 9 is in its correct place.

Pass 2:
- Compare 2 and 5, no swap → [2, 5, 1, 5, 6, 9]
- Compare 5 and 1, swap → [2, 1, 5, 5, 6, 9]
- Compare 5 and 5, no swap → [2, 1, 5, 5, 6, 9]
- Compare 5 and 6, no swap → [2, 1, 5, 5, 6, 9]
- Now, 6 is in its correct place.

This continues until the array is fully sorted.

### Time Complexity:
Best Case:         O(n) (when the array is already sorted, just one pass)
Average Case:      O(n^2) (needs multiple passes through the array)
Worst Case:        O(n^2) (when the array is in reverse order)
Space Complexity:  O(1) (It is an in-place sorting algorithm, requiring no extra space.)